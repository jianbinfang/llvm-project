//===---- MatrixISelDAGToDAG.h - A Dag to Dag Inst Selector for Matrix --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MATRIX target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MATRIX_MATRIXISELDAGTODAG_H
#define LLVM_LIB_TARGET_MATRIX_MATRIXISELDAGTODAG_H

#include "MatrixConfig.h"

#include "Matrix.h"
#include "MatrixSubtarget.h"
#include "MatrixTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// MatrixDAGToDAGISel - MATRIX specific code to select MATRIX machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

class MatrixDAGToDAGISel : public SelectionDAGISel {
public:
  explicit MatrixDAGToDAGISel(MatrixTargetMachine &TM, CodeGenOpt::Level OL)
      : SelectionDAGISel(TM, OL), Subtarget(nullptr) {}

  // Pass Name
  StringRef getPassName() const override {
    return "MATRIX DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

protected:

  /// Keep a pointer to the MatrixSubtarget around so that we can make the right
  /// decision when generating code for different targets.
  const MatrixSubtarget *Subtarget;

private:
  // Include the pieces autogenerated from the target description.
  #include "MatrixGenDAGISel.inc"

  /// getTargetMachine - Return a reference to the TargetMachine, casted
  /// to the target-specific type.
  const MatrixTargetMachine &getTargetMachine() {
    return static_cast<const MatrixTargetMachine &>(TM);
  }

  void Select(SDNode *N) override;

  virtual bool trySelect(SDNode *Node) = 0;

  // Complex Pattern.
  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);

  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

};

}

#endif

